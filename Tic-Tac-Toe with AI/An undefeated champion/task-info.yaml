type: edu
custom_name: stage5
files:
- name: src/tictactoe/Main.java
  visible: true
  text: |
    package tictactoe;

    public class Main {
        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: test/Grid.java
  visible: false
  text: |-
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;
    import java.util.stream.Collectors;
    import java.util.stream.Stream;

    public class Grid {

        private final CellState[][] grid;

        private Grid() {
            grid = new CellState[3][3];
        }

        public static Grid fromLine(String line) {
            Grid grid = new Grid();

            if (line.length() != 9) {
                throw new WrongAnswer("Wrong input length. Expected 9.\nFound " + line.length());
            }

            for (int i = 0; i < line.length(); i++) {
                grid.grid[i / 3][i % 3] = CellState.get(line.charAt(i));
            }

            return grid;
        }

        public static Grid fromOutput(String stringField) {
            return fromOutput(stringField, 1);
        }

        public static Grid fromOutput(String stringField, int fieldNumber) {

            Grid grid = new Grid();

            List<String> fieldLines = Arrays.stream(stringField.split("\n"))
                .map(String::strip)
                .filter(line -> line.startsWith("|") && line.endsWith("|"))
                .collect(Collectors.toList());

            if (fieldLines.size() < 3 * fieldNumber) {
                throw new WrongAnswer("Expected not less than " + fieldNumber + " grids in the output!\n" +
                    "Make sure you print the game grids in the correct format!");
            }

            fieldLines = fieldLines.subList(fieldNumber * 3 - 3, fieldNumber * 3);

            for (int i = 0; i < fieldLines.size(); i++) {
                String line = fieldLines.get(i);
                if (line.length() != 9) {
                    throw new WrongAnswer("Can't parse the game field. The following line has wrong length:\n" + line);
                }
                for (int j = 0; j < 3; j++) {
                    grid.grid[i][j] = CellState.get(line.charAt(j * 2 + 2));
                }
            }

            return grid;
        }

        public static List<Grid> allGridsFromOutput(String stringField) {

            List<Grid> gridList = new ArrayList<>();

            List<String> fieldLines = Arrays.stream(stringField.split("\n"))
                .map(String::strip)
                .filter(line -> line.startsWith("|") && line.endsWith("|"))
                .collect(Collectors.toList());

            if (fieldLines.size() % 3 != 0) {
                throw new WrongAnswer("Wrong grid output format! Each grid should contain 3 lines that starts and ends with '|' symbol!");
            }

            for (int i = 0; i < fieldLines.size() / 3; i++) {
                List<String> gridLines = fieldLines.subList(i * 3, i * 3 + 3);

                Grid grid = new Grid();

                for (int j = 0; j < gridLines.size(); j++) {
                    String line = gridLines.get(j);
                    if (line.length() != 9) {
                        throw new WrongAnswer("Can't parse the game field. The following line has wrong length:\n" + line);
                    }
                    for (int k = 0; k < 3; k++) {
                        grid.grid[j][k] = CellState.get(line.charAt(k * 2 + 2));
                    }
                }

                gridList.add(grid);
            }

            return gridList;
        }

        public static Position getMove(Grid from, Grid to) {
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (from.grid[i][j] != to.grid[i][j]) {
                        return new Position(i, j);
                    }
                }
            }
            throw new WrongAnswer("After making a move the grid was the same!");
        }

        public boolean isWin(CellState player) {
            for (int i = 0; i < 3; i++) {
                if (grid[i][0] == grid[i][1] && grid[i][1] == grid[i][2] && grid[i][2] == player) {
                    return true;
                }
            }

            for (int i = 0; i < 3; i++) {
                if (grid[0][i] == grid[1][i] && grid[1][i] == grid[2][i] && grid[2][i] == player) {
                    return true;
                }
            }

            return grid[0][0] == grid[1][1] && grid[1][1] == grid[2][2] && grid[2][2] == player
                || grid[2][0] == grid[1][1] && grid[1][1] == grid[0][2] && grid[0][2] == player;
        }

        public boolean hasEmptyCells() {
            return Arrays.stream(grid)
                .flatMap(Stream::of)
                .anyMatch(cell -> cell == CellState.EMPTY);
        }

        public int getNumOfEmptyCells() {
            return (int) Arrays.stream(grid)
                .flatMap(Stream::of)
                .filter(cell -> cell == CellState.EMPTY).count();
        }

        public GameState getGameState() {
            if (isWin(CellState.X)) return GameState.X_WIN;
            if (isWin(CellState.O)) return GameState.O_WIN;
            if (hasEmptyCells()) return GameState.NOT_FINISHED;
            else return GameState.DRAW;
        }

        public CellState[][] getGrid() {
            return grid;
        }

        public void setCell(int x, int y, CellState cellState) {
            grid[x][y] = cellState;
        }

        public boolean isCorrectNextGrid(Grid grid) {
            return getNumOfEmptyCells() - grid.getNumOfEmptyCells() == 1;
        }

        public boolean isValidGrid() {

            int numOfX = (int) Arrays.stream(grid)
                .flatMap(Stream::of)
                .filter(cell -> cell == CellState.X).count();
            int numOfO = (int) Arrays.stream(grid)
                .flatMap(Stream::of)
                .filter(cell -> cell == CellState.O).count();

            return Math.abs(numOfO - numOfX) <= 1;
        }

        public static void checkGridSequence(List<Grid> grids) {
            if (grids.size() <= 1) {
                return;
            }

            for (int i = 1; i < grids.size(); i++) {
                Grid prevGrid = grids.get(i - 1);
                Grid grid = grids.get(i);
                if (!grid.isValidGrid()) {
                    throw new WrongAnswer("Impossible grid was printed! The difference between Os and Xs in the grid is greater than 1:\n" + grid);
                }
                if (!prevGrid.isCorrectNextGrid(grid)) {
                    throw new WrongAnswer("After making a move on grid\n" + prevGrid + "\n it can't become\n" + grid);
                }
            }

            Grid lastGrid = grids.get(grids.size() - 1);

            if (lastGrid.getGameState() == GameState.NOT_FINISHED) {
                throw new WrongAnswer("Last grid is not terminal!\n" + lastGrid);
            }
        }

        @Override
        public String toString() {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("---------").append("\n");
            for (int i = 0; i < 3; i++) {
                stringBuilder.append("| ").append(grid[i][0]).append(" ").append(grid[i][1]).append(" ").append(grid[i][2]).append(" |\n");
            }
            stringBuilder.append("---------");
            return stringBuilder.toString();
        }

        private String toLine() {
            StringBuilder result = new StringBuilder();
            for (int i = 0; i < 9; i++) {
                result.append(grid[i / 3][i % 3]);
            }
            return result.toString();
        }

        @Override
        public boolean equals(Object o) {
            if (!(o instanceof Grid)) {
                return false;
            }

            Grid grid = (Grid) o;

            for (int i = 0; i < 9; i++) {
                if (grid.grid[i / 3][i % 3] != this.grid[i / 3][i % 3]) {
                    return false;
                }
            }
            return true;
        }

        public Grid copy() {
            return Grid.fromLine(toLine());
        }
    }

    enum GameState {

        X_WIN, O_WIN, DRAW, NOT_FINISHED

    }

    enum CellState {

        X("X"), O("O"), EMPTY(" ");

        String value;

        CellState(String value) {
            this.value = value;
        }

        static CellState get(char symbol) {
            switch (symbol) {
                case 'X':
                    return X;
                case 'O':
                    return O;
                case ' ':
                case '_':
                    return EMPTY;
                default:
                    throw new WrongAnswer("Bad symbol '" + symbol + "' in the game grid");
            }
        }

        static CellState getOpponent(CellState player) {
            if (player == X) {
                return O;
            } else {
                return X;
            }
        }

        @Override
        public String toString() {
            return value;
        }
    }
  learner_created: false
- name: test/Minimax.java
  visible: false
  text: |+
    import java.util.ArrayList;
    import java.util.List;

    public class Minimax {

        private static Position bestPosition;

        public static Position getMove(Grid grid, CellState player) {

            int bestScore = Integer.MIN_VALUE;

            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (grid.getGrid()[i][j] == CellState.EMPTY) {
                        grid.setCell(i, j, player);
                        int score = minimax(grid, CellState.getOpponent(player), false, player, 1);
                        grid.setCell(i, j, CellState.EMPTY);
                        if (score > bestScore) {
                            bestScore = score;
                            bestPosition = new Position(i, j);
                        }
                    }
                }
            }

            return bestPosition;
        }

        private static int minimax(Grid grid, CellState player, boolean isMaximize, CellState startPlayer, int depth) {

            switch (grid.getGameState()) {
                case X_WIN:
                    return startPlayer == CellState.X ? 10 - depth : depth - 10;
                case O_WIN:
                    return startPlayer == CellState.O ? 10 - depth : depth - 10;
                case DRAW:
                    return 0;
            }

            int bestScore = isMaximize ? Integer.MIN_VALUE : Integer.MAX_VALUE;

            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (grid.getGrid()[i][j] == CellState.EMPTY) {
                        grid.setCell(i, j, player);
                        int score = minimax(grid, CellState.getOpponent(player), !isMaximize, startPlayer, depth + 1);
                        grid.setCell(i, j, CellState.EMPTY);
                        bestScore = isMaximize ? Math.max(bestScore, score) : Math.min(bestScore, score);
                    }
                }
            }

            return bestScore;
        }

        public static List<Position> getAvailablePositions(Grid grid, CellState player) {

            List<Position> positions = new ArrayList<>();

            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (grid.getGrid()[i][j] == CellState.EMPTY) {
                        grid.setCell(i, j, player);
                        int score = minimax(grid, CellState.getOpponent(player), false, player, 1);
                        if (score >= 0) {
                            positions.add(new Position(i, j));
                        }
                        grid.setCell(i, j, CellState.EMPTY);
                    }
                }
            }

            return positions;
        }
    }

    class Position {

        int x;
        int y;

        public Position(int x, int y) {
            this.x = x;
            this.y = y;
        }

        @Override
        public String toString() {
            return x + " " + y;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            Position position = (Position) o;
            return x == position.x &&
                y == position.y;
        }
    }



  learner_created: false
- name: test/TicTacToeTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.List;


    public class TicTacToeTest extends StageTest<String> {

        int[] easyAiMoves = new int[9];

        @DynamicTest(order = 0)
        CheckResult testBadParameters() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start");
            if (!output.toLowerCase().contains("bad parameters")) {
                return CheckResult.wrong("After entering start command with wrong parameters you should print 'Bad parameters!' and ask to enter a command again!");
            }

            output = program.execute("start easy");
            if (!output.toLowerCase().contains("bad parameters")) {
                return CheckResult.wrong("After entering start command with wrong parameters you should print 'Bad parameters!' and ask to enter a command again!");
            }

            program.execute("exit");

            if (!program.isFinished()) {
                return CheckResult.wrong("After entering 'exit' command you should stop the program!");
            }

            return CheckResult.correct();
        }


        @DynamicTest(order = 1)
        CheckResult testGridOutput() {

            TestedProgram program = new TestedProgram();

            program.start();

            String output = program.execute("start user easy");

            Grid printedGrid = Grid.fromOutput(output);
            Grid emptyGrid = Grid.fromLine("_________");

            if (!printedGrid.equals(emptyGrid)) {
                return CheckResult.wrong("After starting the program you should print an empty grid!\n" +
                    "Correct empty grid:\n" + emptyGrid);
            }

            if (!output.toLowerCase().contains("enter the coordinates:")) {
                return CheckResult.wrong("After printing an empty grid you should ask to enter cell coordinates!");
            }

            output = program.execute("2 2");

            Grid gridAfterMove = Grid.fromOutput(output);
            Grid correctGridAfterMove = Grid.fromLine("____X____");

            if (!gridAfterMove.equals(correctGridAfterMove)) {
                return CheckResult.wrong("After making the move wrong grid was printed.\n" +
                    "Your grid:\n" + gridAfterMove + "\n" +
                    "Correct grid:\n" + correctGridAfterMove);
            }

            if (!output.toLowerCase().contains("making move level \"easy\"")) {
                return CheckResult.wrong("After entering a cell coordinates you should print:\nMaking move level \"easy\"");
            }

            Grid gridAfterAiMove = Grid.fromOutput(output, 2);

            if (gridAfterAiMove.equals(gridAfterMove)) {
                return CheckResult.wrong("After AI move grid wasn't changed!");
            }

            Grid gameGrid = gridAfterAiMove;

            while (true) {
                if (gameGrid.getGameState() != GameState.NOT_FINISHED) {
                    switch (gameGrid.getGameState()) {
                        case X_WIN:
                            if (!output.contains("X wins")) {
                                return CheckResult.wrong("You should print 'X wins' if X win the game");
                            }
                            break;
                        case O_WIN:
                            if (!output.contains("O wins")) {
                                return CheckResult.wrong("You should print 'O wins' if O win the game");
                            }
                            break;
                        case DRAW:
                            if (!output.contains("Draw")) {
                                return CheckResult.wrong("You should print 'Draw' if the game ends with draw!");
                            }
                            break;
                    }
                    break;
                }
                Position nextMove = Minimax.getMove(gameGrid, CellState.X);

                Grid tempGrid = gameGrid.copy();
                tempGrid.setCell(nextMove.x, nextMove.y, CellState.X);

                output = program.execute((nextMove.x + 1) + " " + (nextMove.y + 1));

                gameGrid = Grid.fromOutput(output);

                if (!gameGrid.equals(tempGrid)) {
                    return CheckResult.wrong("After making move (" + nextMove + ") the game grid is wrong!\n" +
                        "Your gird\n" + gameGrid + "\n" +
                        "Correct grid\n" + tempGrid);
                }

                if (gameGrid.getGameState() != GameState.NOT_FINISHED)
                    continue;

                gameGrid = Grid.fromOutput(output, 2);
            }

            return CheckResult.correct();
        }

        @DynamicTest(repeat = 100, order = 2)
        CheckResult checkEasyAi() {
            TestedProgram program = new TestedProgram();
            program.start();

            program.execute("start user easy");

            String output = program.execute("2 2");

            Grid gridAfterAiMove = Grid.fromOutput(output, 2);

            CellState[][] array = gridAfterAiMove.getGrid();

            for (int i = 0; i < 9; i++) {
                if (i == 4) {
                    continue;
                }
                if (array[i / 3][i % 3] == CellState.O) {
                    easyAiMoves[i]++;
                }
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 3)
        CheckResult checkRandom() {
            double averageScore = 0;

            for (int i = 0; i < easyAiMoves.length; i++) {
                averageScore += (i + 1) * easyAiMoves[i];
            }

            averageScore /= 8;

            double expectedValue = (double) (1 + 2 + 3 + 4 + 6 + 7 + 8 + 9) * 100 / 8 / 8;

            if (Math.abs(averageScore - expectedValue) > 20) {
                return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!");
            }

            return CheckResult.correct();
        }

        boolean isEasyNotMovingLikeMedium = false;

        @DynamicTest(repeat = 30, order = 4)
        CheckResult checkEasyNotMovingLikeMedium() {

            if (isEasyNotMovingLikeMedium) {
                return CheckResult.correct();
            }

            TestedProgram program = new TestedProgram();
            program.start();
            program.execute("start user easy");

            String output = program.execute("2 2");

            Grid gameGrid = Grid.fromOutput(output, 2);

            CellState[][] cellStates = gameGrid.getGrid();

            if (cellStates[0][0] == CellState.EMPTY && cellStates[2][2] == CellState.EMPTY) {
                output = program.execute("1 1");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][2] == CellState.EMPTY) {
                    isEasyNotMovingLikeMedium = true;
                }
            } else {
                output = program.execute("1 3");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][0] == CellState.EMPTY) {
                    isEasyNotMovingLikeMedium = true;
                }
            }

            program.stop();
            return CheckResult.correct();
        }

        @DynamicTest(order = 5)
        CheckResult checkEasyNotMovingLikeMediumAfter() {
            if (!isEasyNotMovingLikeMedium) {
                return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!");
            }
            return CheckResult.correct();
        }

        @DynamicTest(order = 6)
        CheckResult checkEasyVsEasy() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start easy easy");

            List<Grid> gridList = Grid.allGridsFromOutput(output);

            Grid.checkGridSequence(gridList);

            return CheckResult.correct();
        }

        @DynamicTest(repeat = 10, order = 7)
        CheckResult checkMediumAi() {
            TestedProgram program = new TestedProgram();
            program.start();
            program.execute("start user medium");

            String output = program.execute("2 2");

            Grid gameGrid = Grid.fromOutput(output, 2);

            CellState[][] cellStates = gameGrid.getGrid();

            if (cellStates[0][0] == CellState.EMPTY && cellStates[2][2] == CellState.EMPTY) {
                output = program.execute("1 1");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][2] == CellState.EMPTY) {
                    return CheckResult.wrong("Looks like your Medium level AI doesn't make a correct move!");
                }
            } else {
                output = program.execute("1 3");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][0] == CellState.EMPTY) {
                    return CheckResult.wrong("Looks like your Medium level AI doesn't make a correct move!");
                }
            }
            program.stop();

            return CheckResult.correct();
        }

        @DynamicTest(order = 8, repeat = 5)
        CheckResult checkMediumVsMedium() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start medium medium");

            List<Grid> gridList = Grid.allGridsFromOutput(output);

            Grid.checkGridSequence(gridList);

            return CheckResult.correct();
        }

        boolean isMediumNotMovingLikeHard = false;

        @DynamicTest(repeat = 30, order = 9)
        CheckResult checkMediumNotMovingLikeHard() {

            if (isMediumNotMovingLikeHard) {
                return CheckResult.correct();
            }

            TestedProgram program = new TestedProgram();
            program.start();

            program.execute("start user medium");

            String output = program.execute("2 2");

            Grid userMoveGrid = Grid.fromOutput(output, 1);
            Grid mediumMoveGrid = Grid.fromOutput(output, 2);

            Position mediumMove = Grid.getMove(userMoveGrid, mediumMoveGrid);

            List<Position> minimaxCorrectPositions = Minimax.getAvailablePositions(userMoveGrid, CellState.O);

            if (!minimaxCorrectPositions.contains(mediumMove)) {
                isMediumNotMovingLikeHard = true;
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 10)
        CheckResult checkMediumNotMovingLikeHardAfter() {
            if (!isMediumNotMovingLikeHard) {
                return CheckResult.wrong("Looks like Medium level AI doesn't make a random move!");
            }
            return CheckResult.correct();
        }

        @DynamicTest(order = 11)
        CheckResult checkHardAi() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start user hard");
            Grid grid = Grid.fromOutput(output);
            Position nextMove = Minimax.getMove(grid, CellState.X);
            output = program.execute((nextMove.x + 1) + " " + (nextMove.y + 1));

            while (!output.toLowerCase().contains("win") && !output.toLowerCase().contains("draw")) {
                Grid gridAfterUserMove = Grid.fromOutput(output);
                Grid gridAfterAiMove = Grid.fromOutput(output, 2);
                Position aiMove = Grid.getMove(gridAfterUserMove, gridAfterAiMove);

                List<Position> correctMinimaxMovePositions = Minimax.getAvailablePositions(gridAfterUserMove, CellState.O);
                if (!correctMinimaxMovePositions.contains(aiMove)) {
                    return CheckResult.wrong("Your minimax algorithm is wrong! It chooses wrong positions to make a move!");
                }

                nextMove = Minimax.getMove(gridAfterAiMove, CellState.X);

                output = program.execute((nextMove.x + 1) + " " + (nextMove.y + 1));
            }

            return CheckResult.correct();
        }

        @DynamicTest(repeat = 5, order = 12)
        CheckResult checkHardVsHard() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start hard hard");

            if (!output.toLowerCase().contains("draw")) {
                return CheckResult.wrong("The result of the game between minimax algorithms should be always 'Draw'!\n" +
                    "Make sure your output contains 'Draw'.");
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/tictactoe/Move.java
  visible: true
  text: |+
    package tictactoe;

    import java.util.Scanner;

    public class Move {
        static boolean playerMove(Grid grid, char XO){
            boolean isContinue = true;
            Scanner scanner = new Scanner(System.in);
            System.out.print("Enter the coordinates: ");
            String[] coordinates = scanner.nextLine().trim().split(" ");
            String check = "";
            check = checkCoordinates(parseCoordinates(coordinates));
            switch (check){
                case "notNumber":
                case "oneParam":
                    System.out.println("You should enter numbers!");
                    break;
                case "outOfRange":
                    System.out.println("Coordinates should be from 1 to 3!");
                    break;
                case "available":
                    if (chekMove(parseCoordinates(coordinates), grid)){
                        makeMove(parseCoordinates(coordinates), grid, XO);
                        isContinue = false;
                    }
                    else {
                        System.out.println("This cell is occupied! Choose another one!");
                    }
                    break;
                default:
                    break;
            }
            return isContinue;
        }
        static int[] parseCoordinates(String[] coordinates){
            int[] coordinateToInt = new int[]{-1, -1};
            if (coordinates.length == 2){
                try {
                    coordinateToInt[0] = Integer.parseInt(coordinates[0]) - 1;
                    coordinateToInt[1] = Integer.parseInt(coordinates[1]) - 1;
                }
                catch (IllegalArgumentException ignored){
                }
            }
            else {
                coordinateToInt[0] = -2;
                coordinateToInt[1] = -2;
            }
            return coordinateToInt;
        }
        static String checkCoordinates(int[] coordinateToInt){
            String check = "";
            for (int j : coordinateToInt) {
                if (j == -1) {
                    check = "notNumber";
                    break;
                }
                else if (j == -2){
                    check = "oneParam";
                }
                else if (j >= 0 && j < 3) {
                    check = "available";
                } else {
                    check = "outOfRange";
                    break;
                }
            }
            return check;
        }
        static boolean chekMove(int[] coordinateToInt, Grid grid){
            return grid.getGrid()[coordinateToInt[0]][coordinateToInt[1]] == ' ';
        }
        static void makeMove(int[] coordinateToInt ,Grid grid, char XO){
            grid.setGrid(coordinateToInt, XO);
        }


    }

  learner_created: true
- name: src/tictactoe/Grid.java
  visible: true
  text: |
    package tictactoe;

    import java.util.Scanner;

    public class Grid {
        private char[][] grid = new char[3][3];
        char[] diagonal1 = new char[3];
        char[] diagonal2 = new char[3];
        private char[][] rotatedGrid = new char[3][3];
        private char[][] sides;


        Grid() {
            for (int i = 0; i < 3; i++){
                for (int j = 0; j < 3; j++){
                    grid[i][j] = ' ';
                }
            }
            setRotatedGrid();
            setDiagonal1();
            setDiagonal2();
            setSides();
        }
        boolean setGrid(String symbols) {
            if (!symbols.matches("[^XO_]")){
                if (symbols.length() == 9) {
                    symbols = symbols.replaceAll("_", " ");
                    int j = 0;
                    for (int i = 0; i < 3; i++) {
                        grid[0][i] = symbols.charAt(j);
                        j++;
                    }
                    for (int i = 0; i < 3; i++) {
                        grid[1][i] = symbols.charAt(j);
                        j++;
                    }
                    for (int i = 0; i < 3; i++) {
                        grid[2][i] = symbols.charAt(j);
                        j++;
                    }
                    setRotatedGrid();
                    setDiagonal1();
                    setDiagonal2();
                    setSides();
                    return true;
                }
                else return false;
            }
            else return false;

        }
        public void setGrid(char[][] grid) {
            this.grid = grid;
            setRotatedGrid();
            setDiagonal1();
            setDiagonal2();
            setSides();
        }
        public void setGrid(int[] coordinates, char XO) {
            grid[coordinates[0]][coordinates[1]] = XO;
            setRotatedGrid();
            setDiagonal1();
            setDiagonal2();
            setSides();
        }
        public char[][] getGrid() {
            return grid;
        }
        void setRotatedGrid() {
            for (int i = 0; i < 3; i++){
                for (int k = 0; k < 3; k++){
                    rotatedGrid[i][k] = grid[k][i];
                }
            }
        }
        void setDiagonal1() {
            for (int i = 0; i < 3; i++){
                diagonal1[i] = grid[i][i];
            }
        }
        void setDiagonal2() {
            diagonal2[0] = grid[0][2];
            diagonal2[1] = grid[1][1];
            diagonal2[2] = grid[2][0];
        }
        public void setSides() {
            sides = new char[][]{grid[0], grid[1], grid[2], rotatedGrid[0], rotatedGrid[1], rotatedGrid[2],
                    diagonal1, diagonal2};
        }
        public char[][] getSides() {
            return sides;
        }
    }
  learner_created: true
- name: src/tictactoe/Player.java
  visible: true
  text: |
    package tictactoe;

    public enum Player {
        EASY,
        USER,
        MEDIUM;
    }
  learner_created: true
- name: src/tictactoe/Game.java
  visible: true
  text: |
    package tictactoe;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.Locale;
    import java.util.Scanner;
    import java.util.stream.Collectors;

    import static tictactoe.AIMove.*;
    import static tictactoe.GridState.*;
    import static tictactoe.Move.*;
    import static tictactoe.Print.*;

    public class Game {
        private static final Scanner scanner;

        static {
            scanner = new Scanner(System.in);
        }

        static void chooseCommand() {
            System.out.print("Input command: > ");
            ArrayList<String> input = Arrays
                    .stream(scanner.nextLine().trim().split("\\s+"))
                    .map(String::toUpperCase)
                    .collect(Collectors.toCollection(ArrayList::new));
            Player[] players = new Player[2];
            if (input.size() > 0) {
                switch (input.get(0)) {
                    case "START":
                        if (input.size() == 3) {
                            try {
                                players[0] = Player.valueOf(input.get(1));
                                players[1] = Player.valueOf(input.get(2));
                                Grid grid = new Grid();
                                printGrid(grid);
                                playing(players, grid);
                            } catch (IllegalArgumentException e) {
                                System.out.println("Bad parameters!");
                                chooseCommand();
                            }
                        } else {
                            System.out.println("Bad parameters!");
                            chooseCommand();
                        }
                        break;
                    case "EXIT":
                        break;
                    default:
                        chooseCommand();
                        break;
                }
            } else {
                System.out.println("Bad parameters!");
                chooseCommand();
            }
        }

        private static void playing(Player[] players, Grid grid) {
            OuterFor:
            for (int i = 0; i < 9; i++) {
                switch (state(grid)) {
                    case "X wins":
                        System.out.println("X wins");
                        break OuterFor;
                    case "O wins":
                        System.out.println("O wins");
                        break OuterFor;
                    case "Draw":
                        System.out.println("Draw");
                        break OuterFor;
                    default:
                        int j = i % 2;
                        switch (players[j]) {
                            case EASY:
                                easy(grid, i);
                                break;
                            case USER:
                                user(grid, i);
                                break;
                            case MEDIUM:
                                medium(grid, i);
                                break;
                            default:
                                break;
                        }
                }
            }
        }

        private static void easy(Grid grid, int i) {
            char XO = ' ';
            if (i % 2 == 0)
                XO = 'X';
            else
                XO = 'O';
            startAIMove(grid, XO, "EASY");
            printGrid(grid);
        }

        private static void user(Grid grid, int i) {
            char XO = ' ';
            if (i % 2 == 0) {
                XO = 'X';
            } else {
                XO = 'O';
            }
            while (playerMove(grid, XO)) ;
            printGrid(grid);
        }

        private static void medium(Grid grid, int i) {
            char XO = ' ';
            if (i % 2 == 0) {
                XO = 'X';
            } else {
                XO = 'O';
            }
            startAIMove(grid, XO, "MEDIUM");
            printGrid(grid);
        }
    }
  learner_created: true
- name: src/tictactoe/Print.java
  visible: true
  text: |
    package tictactoe;

    public class Print {
        static void printGrid(Grid grid){
            System.out.println();
            System.out.println("---------");
            for (char[] row: grid.getGrid()){
                System.out.print("| ");
                for (char ch: row){
                    System.out.print(ch + " ");
                }
                System.out.println("|");
            }
            System.out.println("---------");
        }
    }
  learner_created: true
- name: src/tictactoe/AIMove.java
  visible: true
  text: |
    package tictactoe;

    import java.util.Random;
    import java.util.Scanner;

    import static tictactoe.Move.chekMove;
    import static tictactoe.Move.makeMove;


    public class AIMove {
        static void startAIMove(Grid grid, char XO, String level) {
            int[] cord = new int[2];
            switch (level) {
                case "EASY":
                    while (easyMove(grid, XO)) ;
                    break;
                case "MEDIUM":
                    while (mediumMove(grid, XO)) ;
                    break;
                default:
                    break;
            }
        }

        static boolean easyMove(Grid grid, char XO) {
            boolean isContinue = true;
            System.out.print("Making move level \"easy\"");
            int[] cord = easyMoveCord(grid);
            if (chekMove(cord, grid)) {
                makeMove(cord, grid, XO);
                isContinue = false;
            }
            return isContinue;
        }

        static boolean mediumMove(Grid grid, char XO) {
            boolean isContinue = true;
            System.out.print("Making move level \"medium\"");
            int[] cord = mediumMoveCord(grid, XO);
            if (chekMove(cord, grid)) {
                makeMove(cord, grid, XO);
                isContinue = false;
            }
            return isContinue;
        }

        static int[] easyMoveCord(Grid grid) {
            Random random = new Random();
            return new int[]{random.nextInt(3), random.nextInt(3)};
        }

        static int[] mediumMoveCord(Grid grid, char currentTurnXO) {
            int[] cord = {-1, -1};
            char[][] side = grid.getSides();
            OUTER:
            for (int i = 0; i < side.length; i++) {
                int X = 0, Y = 0;
                for (int j = 0; j < 3; j++) {
                    if (side[i][j] == 'X') {
                        X++;
                    } else if (side[i][j] == 'Y') {
                        Y++;
                    }
                    if ((X == 2 && currentTurnXO == 'O') || (Y == 2 && currentTurnXO == 'X')) {
                        for (int k = 0; k < 3; k++) {
                            if (side[i][k] == ' ') {
                                int x = -1;
                                int y = -1;
                                switch (i){
                                    case 0:
                                    case 1:
                                    case 2:
                                        x = i;
                                        y = k;
                                        break;
                                    case 3:
                                    case 4:
                                    case 5:
                                        x = k;
                                        y = i - 3;
                                        break;
                                    case 6:
                                        x = k;
                                        y = k;
                                        break;
                                    case 7:
                                        if (k == 0){
                                            x = 0;
                                            y = 2;
                                        }
                                        else if (k == 1){
                                            x = 1;
                                            y = 1;
                                        }
                                        else {
                                            x = 2;
                                            y = 0;
                                        }
                                        break;
                                }
                                cord[0] = x;
                                cord[1] = y;
                                break OUTER;
                            }
                        }
                    }
                }
            }
            if (cord[0] == -1) {
                cord = easyMoveCord(grid);
            }

            return cord;
        }
    }
  learner_created: true
- name: src/tictactoe/GridState.java
  visible: true
  text: |
    package tictactoe;

    import java.util.Arrays;

    public class GridState {
        static String state(Grid grid) {
            String check = "";
            int X = 0;
            int O = 0;
            int empty = 0;
            for (char[] row : grid.getGrid()) {
                for (char ch : row) {
                    if (ch == 'X') {
                        X++;
                    } else if (ch == 'O') {
                        O++;
                    } else if (ch == ' ') {
                        empty++;
                    }
                }
            }

            if (Math.abs(X - O) > 1) {
                check = "Impossible";
            } else {
                switch (checkSides(grid)) {
                    case "Impossible":
                        check = "Impossible";
                        break;
                    case "X wins":
                        check = "X wins";
                        break;
                    case "O wins":
                        check = "O wins";
                        break;
                    default:
                        if (empty == 0) {
                            check = "Draw";
                        } else if (empty > 0) {
                            if (X <= O){
                                check = "Xstart";
                            }else {
                                check = "Ostart";
                            }
                        }
                        break;
                }
            }
            return check;
        }

        static String stateF(Grid grid) {
            String check = "";
            int X = 0;
            int O = 0;
            int empty = 0;
            for (char[] row : grid.getGrid()) {
                for (char ch : row) {
                    if (ch == 'X') {
                        X++;
                    } else if (ch == 'O') {
                        O++;
                    } else if (ch == ' ') {
                        empty++;
                    }
                }
            }

            if (Math.abs(X - O) > 1) {
                check = "Impossible";
            } else {
                switch (checkSides(grid)) {
                    case "Impossible":
                        check = "Impossible";
                        break;
                    case "X wins":
                        check = "X wins";
                        break;
                    case "O wins":
                        check = "O wins";
                        break;
                    default:
                        if (empty == 0) {
                            check = "Draw";
                        } else if (empty > 0) {
                            check = "Game not finished";
                        }
                        break;
                }
            }
            return check;
        }

        //return simple array representing full filled side with special case (X, O)
        static char[] simplingSides(Grid grid) {
            char[][] side = grid.getSides();
            char[] simpleSides = new char[grid.getSides().length];
            Arrays.fill(simpleSides, 'f');
            for (int i = 0; i < side.length; i++) {
                char last = side[i][0];
                boolean isInRow = true;
                for (int j = 1; j < 3; j++) {
                    if (side[i][j] == last) {
                        last = side[i][j];
                    } else {
                        isInRow = false;
                        break;
                    }
                }
                if (isInRow) {
                    simpleSides[i] = side[i][0];
                }
            }
            return simpleSides;
        }

        static String checkSides(Grid grid) {
            String check = "";
            char[] Sides = new char[8];
            Sides = simplingSides(grid);
            int X = 0;
            int O = 0;
            for (int i = 0; i < Sides.length; i++) {
                if (Sides[i] == 'X') {
                    X++;
                } else if (Sides[i] == 'O') {
                    O++;
                }
            }
            if ((X > 0 && O > 0)) {
                check = "Impossible";
            } else if (X == 1 && O == 0) {
                check = "X wins";
            } else if (O == 1 && X == 0) {
                check = "O wins";
            }
            return check;
        }


    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/81/stages/451/implement#comment
status: Solved
feedback:
  message: Well done! You finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Fri, 11 Jun 2021 07:24:21 UTC
record: 5
