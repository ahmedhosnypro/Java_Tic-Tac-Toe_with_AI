type: edu
custom_name: stage3
files:
- name: src/tictactoe/Main.java
  visible: true
  text: |
    package tictactoe;

    public class Main {
        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: test/TicTacToeTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.List;


    public class TicTacToeTest extends StageTest<String> {

        int[] easyAiMoves = new int[9];

        @DynamicTest(order = 0)
        CheckResult testBadParameters() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start");
            if (!output.toLowerCase().contains("bad parameters")) {
                return CheckResult.wrong("After entering start command with wrong parameters you should print 'Bad parameters!' and ask to enter a command again!");
            }

            output = program.execute("start easy");
            if (!output.toLowerCase().contains("bad parameters")) {
                return CheckResult.wrong("After entering start command with wrong parameters you should print 'Bad parameters!' and ask to enter a command again!");
            }

            program.execute("exit");

            if (!program.isFinished()) {
                return CheckResult.wrong("After entering 'exit' command you should stop the program!");
            }

            return CheckResult.correct();
        }


        @DynamicTest(order = 1)
        CheckResult testGridOutput() {

            TestedProgram program = new TestedProgram();

            program.start();

            String output = program.execute("start user easy");

            Grid printedGrid = Grid.fromOutput(output);
            Grid emptyGrid = Grid.fromLine("_________");

            if (!printedGrid.equals(emptyGrid)) {
                return CheckResult.wrong("After starting the program you should print an empty grid!\n" +
                    "Correct empty grid:\n" + emptyGrid);
            }

            if (!output.toLowerCase().contains("enter the coordinates:")) {
                return CheckResult.wrong("After printing an empty grid you should ask to enter cell coordinates!");
            }

            output = program.execute("2 2");

            Grid gridAfterMove = Grid.fromOutput(output);
            Grid correctGridAfterMove = Grid.fromLine("____X____");

            if (!gridAfterMove.equals(correctGridAfterMove)) {
                return CheckResult.wrong("After making the move wrong grid was printed.\n" +
                    "Your grid:\n" + gridAfterMove + "\n" +
                    "Correct grid:\n" + correctGridAfterMove);
            }

            if (!output.toLowerCase().replace("'", "\"").contains("making move level \"easy\"")) {
                return CheckResult.wrong("After entering a cell coordinates you should print:\nMaking move level \"easy\"");
            }

            Grid gridAfterAiMove = Grid.fromOutput(output, 2);

            if (gridAfterAiMove.equals(gridAfterMove)) {
                return CheckResult.wrong("After AI move grid wasn't changed!");
            }

            Grid gameGrid = gridAfterAiMove;

            while (true) {
                if (gameGrid.getGameState() != GameState.NOT_FINISHED) {
                    switch (gameGrid.getGameState()) {
                        case X_WIN:
                            if (!output.contains("X wins")) {
                                return CheckResult.wrong("You should print 'X wins' if X win the game");
                            }
                            break;
                        case O_WIN:
                            if (!output.contains("O wins")) {
                                return CheckResult.wrong("You should print 'O wins' if O win the game");
                            }
                            break;
                        case DRAW:
                            if (!output.contains("Draw")) {
                                return CheckResult.wrong("You should print 'Draw' if the game ends with draw!");
                            }
                            break;
                    }
                    break;
                }
                Position nextMove = Minimax.getMove(gameGrid, CellState.X);

                Grid tempGrid = gameGrid.copy();
                tempGrid.setCell(nextMove.x, nextMove.y, CellState.X);

                output = program.execute((nextMove.x + 1) + " " + (nextMove.y + 1));

                gameGrid = Grid.fromOutput(output);

                if (!gameGrid.equals(tempGrid)) {
                    return CheckResult.wrong("After making move (" + nextMove + ") the game grid is wrong!\n" +
                        "Your gird\n" + gameGrid + "\n" +
                        "Correct grid\n" + tempGrid);
                }

                if (gameGrid.getGameState() != GameState.NOT_FINISHED)
                    continue;

                gameGrid = Grid.fromOutput(output, 2);
            }

            return CheckResult.correct();
        }

        @DynamicTest(repeat = 100, order = 2)
        CheckResult checkEasyAi() {
            TestedProgram program = new TestedProgram();
            program.start();

            program.execute("start user easy");

            String output = program.execute("2 2");

            Grid gridAfterAiMove = Grid.fromOutput(output, 2);

            CellState[][] array = gridAfterAiMove.getGrid();

            for (int i = 0; i < 9; i++) {
                if (i == 4) {
                    continue;
                }
                if (array[i / 3][i % 3] == CellState.O) {
                    easyAiMoves[i]++;
                }
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 3)
        CheckResult checkRandom() {
            double averageScore = 0;

            for (int i = 0; i < easyAiMoves.length; i++) {
                averageScore += (i + 1) * easyAiMoves[i];
            }

            averageScore /= 8;

            double expectedValue = (double) (1 + 2 + 3 + 4 + 6 + 7 + 8 + 9) * 100 / 8 / 8;

            if (Math.abs(averageScore - expectedValue) > 20) {
                return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!");
            }

            return CheckResult.correct();
        }

        boolean isEasyNotMovingLikeMedium = false;

        @DynamicTest(repeat = 30, order = 4)
        CheckResult checkEasyNotMovingLikeMedium() {

            if (isEasyNotMovingLikeMedium) {
                return CheckResult.correct();
            }

            TestedProgram program = new TestedProgram();
            program.start();
            program.execute("start user easy");

            String output = program.execute("2 2");

            Grid gameGrid = Grid.fromOutput(output, 2);

            CellState[][] cellStates = gameGrid.getGrid();

            if (cellStates[0][0] == CellState.EMPTY && cellStates[2][2] == CellState.EMPTY) {
                output = program.execute("1 1");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][2] == CellState.EMPTY) {
                    isEasyNotMovingLikeMedium = true;
                }
            } else {
                output = program.execute("1 3");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][0] == CellState.EMPTY) {
                    isEasyNotMovingLikeMedium = true;
                }
            }

            program.stop();
            return CheckResult.correct();
        }

        @DynamicTest(order = 5)
        CheckResult checkEasyNotMovingLikeMediumAfter() {
            if (!isEasyNotMovingLikeMedium) {
                return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!");
            }
            return CheckResult.correct();
        }


        @DynamicTest(order = 6)
        CheckResult checkEasyVsEasy() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start easy easy");

            List<Grid> gridList = Grid.allGridsFromOutput(output);

            Grid.checkGridSequence(gridList);

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/tictactoe/Move.java
  visible: true
  text: |
    package tictactoe;

    import java.util.Scanner;

    public class Move {
        static boolean playerMove(Grid grid) {
            boolean isContinue = true;
            Scanner scanner = new Scanner(System.in);
            System.out.print("Enter the coordinates: ");
            String[] coordinates = scanner.nextLine().trim().split(" ");
            String check = "";
            check = checkCoordinates(parseCoordinates(coordinates));
            switch (check) {
                case "notNumber":
                case "oneParam":
                    System.out.println("You should enter numbers!");
                    break;
                case "outOfRange":
                    System.out.println("Coordinates should be from 1 to 3!");
                    break;
                case "available":
                    if (chekMove(parseCoordinates(coordinates), grid)) {
                        makeMove(parseCoordinates(coordinates), grid, 'X');
                        isContinue = false;
                    } else {
                        System.out.println("This cell is occupied! Choose another one!");
                    }
                    break;
                default:
                    break;
            }
            return isContinue;
        }

        static int[] parseCoordinates(String[] coordinates) {
            int[] coordinateToInt = new int[]{-1, -1};
            if (coordinates.length == 2) {
                try {
                    coordinateToInt[0] = Integer.parseInt(coordinates[0]) - 1;
                    coordinateToInt[1] = Integer.parseInt(coordinates[1]) - 1;
                } catch (IllegalArgumentException ignored) {
                }
            } else {
                coordinateToInt[0] = -2;
                coordinateToInt[1] = -2;
            }
            return coordinateToInt;
        }

        static String checkCoordinates(int[] coordinateToInt) {
            String check = "";
            for (int j : coordinateToInt) {
                if (j == -1) {
                    check = "notNumber";
                    break;
                } else if (j == -2) {
                    check = "oneParam";
                } else if (j >= 0 && j < 3) {
                    check = "available";
                } else {
                    check = "outOfRange";
                    break;
                }
            }
            return check;
        }

        static boolean chekMove(int[] coordinateToInt, Grid grid) {
            return grid.getGrid()[coordinateToInt[0]][coordinateToInt[1]] == ' ';
        }

        static void makeMove(int[] coordinateToInt, Grid grid, char XO) {
            grid.setGrid(coordinateToInt, XO);
        }


    }
  learner_created: true
- name: src/tictactoe/Grid.java
  visible: true
  text: |-
    package tictactoe;

    public class Grid {
        private char[][] grid = new char[3][3];
        char[] diagonal1 = new char[3];
        char[] diagonal2 = new char[3];
        private char[][] rotatedGrid = new char[3][3];
        private char[][] sides;


        Grid() {
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    grid[i][j] = ' ';
                }
            }
            setRotatedGrid();
            setDiagonal1();
            setDiagonal2();
            setSides();
        }

        boolean setGrid(String symbols) {
            if (!symbols.matches("[^XO_]")) {
                if (symbols.length() == 9) {
                    symbols = symbols.replaceAll("_", " ");
                    int j = 0;
                    for (int i = 0; i < 3; i++) {
                        grid[0][i] = symbols.charAt(j);
                        j++;
                    }
                    for (int i = 0; i < 3; i++) {
                        grid[1][i] = symbols.charAt(j);
                        j++;
                    }
                    for (int i = 0; i < 3; i++) {
                        grid[2][i] = symbols.charAt(j);
                        j++;
                    }
                    setRotatedGrid();
                    setDiagonal1();
                    setDiagonal2();
                    setSides();
                    return true;
                } else return false;
            } else return false;

        }

        public void setGrid(char[][] grid) {
            this.grid = grid;
            setRotatedGrid();
            setDiagonal1();
            setDiagonal2();
            setSides();
        }

        public void setGrid(int[] coordinates, char XO) {
            grid[coordinates[0]][coordinates[1]] = XO;
            setRotatedGrid();
            setDiagonal1();
            setDiagonal2();
            setSides();
        }

        public char[][] getGrid() {
            return grid;
        }

        void setRotatedGrid() {
            for (int i = 0; i < 3; i++) {
                for (int k = 0; k < 3; k++) {
                    rotatedGrid[i][k] = grid[k][i];
                }
            }
        }

        void setDiagonal1() {
            for (int i = 0; i < 3; i++) {
                diagonal1[i] = grid[i][i];
            }
        }

        void setDiagonal2() {
            diagonal2[0] = grid[0][2];
            diagonal2[1] = grid[1][1];
            diagonal2[2] = grid[2][0];
        }

        public void setSides() {
            sides = new char[][]{grid[0], grid[1], grid[2], rotatedGrid[0], rotatedGrid[1], rotatedGrid[2],
                    diagonal1, diagonal2};
        }

        public char[][] getSides() {
            return sides;
        }
    }
  learner_created: true
- name: src/tictactoe/Print.java
  visible: true
  text: |-
    package tictactoe;

    public class Print {
        static void printGrid(Grid grid) {
            System.out.println();
            System.out.println("---------");
            for (char[] row : grid.getGrid()) {
                System.out.print("| ");
                for (char ch : row) {
                    System.out.print(ch + " ");
                }
                System.out.println("|");
            }
            System.out.println("---------");
        }
    }
  learner_created: true
- name: src/tictactoe/AIMove.java
  visible: true
  text: |-
    package tictactoe;

    import java.util.Random;

    import static tictactoe.Move.chekMove;
    import static tictactoe.Move.makeMove;


    public class AIMove {
        static boolean startAIMove(Grid grid) {
            boolean isContinue = true;
            String level = "EASY";
            int[] cords = new int[2];
            switch (level) {
                case "EASY":
                    cords = easyMove(grid);
                    break;
                default:
                    break;
            }
            if (chekMove(cords, grid)) {
                makeMove(cords, grid, 'O');
                isContinue = false;
            }

            return isContinue;
        }

        private static int[] easyMove(Grid grid) {
            System.out.print("Making move level \"easy\"");
            int[] cords = easyMoveCords(grid);
            return cords;
        }

        static int[] easyMoveCords(Grid grid) {
            Random random = new Random();
            return new int[]{random.nextInt(3), random.nextInt(3)};
        }
    }
  learner_created: true
- name: src/tictactoe/GridState.java
  visible: true
  text: |-
    package tictactoe;

    import java.util.Arrays;

    public class GridState {
        static String state(Grid grid) {
            String check = "";
            int X = 0;
            int O = 0;
            int empty = 0;
            for (char[] row : grid.getGrid()) {
                for (char ch : row) {
                    if (ch == 'X') {
                        X++;
                    } else if (ch == 'O') {
                        O++;
                    } else if (ch == ' ') {
                        empty++;
                    }
                }
            }

            if (Math.abs(X - O) > 1) {
                check = "Impossible";
            } else {
                switch (checkSides(grid)) {
                    case "Impossible":
                        check = "Impossible";
                        break;
                    case "X wins":
                        check = "X wins";
                        break;
                    case "O wins":
                        check = "O wins";
                        break;
                    default:
                        if (empty == 0) {
                            check = "Draw";
                        } else if (empty > 0) {
                            if (X <= O) {
                                check = "Xstart";
                            } else {
                                check = "Ostart";
                            }
                        }
                        break;
                }
            }
            return check;
        }

        static String stateF(Grid grid) {
            String check = "";
            int X = 0;
            int O = 0;
            int empty = 0;
            for (char[] row : grid.getGrid()) {
                for (char ch : row) {
                    if (ch == 'X') {
                        X++;
                    } else if (ch == 'O') {
                        O++;
                    } else if (ch == ' ') {
                        empty++;
                    }
                }
            }

            if (Math.abs(X - O) > 1) {
                check = "Impossible";
            } else {
                switch (checkSides(grid)) {
                    case "Impossible":
                        check = "Impossible";
                        break;
                    case "X wins":
                        check = "X wins";
                        break;
                    case "O wins":
                        check = "O wins";
                        break;
                    default:
                        if (empty == 0) {
                            check = "Draw";
                        } else if (empty > 0) {
                            check = "Game not finished";
                        }
                        break;
                }
            }
            return check;
        }

        static char[] simpleSides(Grid grid) {
            char[][] sides = grid.getSides();
            char[] simpleSides = new char[grid.getSides().length];
            Arrays.fill(simpleSides, 'A');
            for (int i = 0; i < sides.length; i++) {
                char last = sides[i][0];
                boolean isInRow = true;
                for (int j = 1; j < 3; j++) {
                    if (sides[i][j] == last) {
                        last = sides[i][j];
                    } else {
                        isInRow = false;
                        break;
                    }
                }
                if (isInRow) {
                    simpleSides[i] = sides[i][0];
                }
            }
            return simpleSides;
        }

        static String checkSides(Grid grid) {
            String check = "";
            char[] Sides = new char[8];
            Sides = simpleSides(grid);
            int X = 0;
            int O = 0;
            for (int i = 0; i < Sides.length; i++) {
                if (Sides[i] == 'X') {
                    X++;
                } else if (Sides[i] == 'O') {
                    O++;
                }
            }
            if ((X > 0 && O > 0)) {
                check = "Impossible";
            } else if (X == 1 && O == 0) {
                check = "X wins";
            } else if (O == 1 && X == 0) {
                check = "O wins";
            }
            return check;
        }
    }
  learner_created: true
- name: src/tictactoe/Command.java
  visible: true
  learner_created: true
- name: src/tictactoe/Game.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/7436#comment
status: Solved
feedback:
  message: Congratulations!
  time: Mon, 31 Jan 2022 05:07:08 UTC
record: 3
